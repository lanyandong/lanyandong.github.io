[{"title":"选择blog主题为Hexo-Casper","url":"/2019/04/12/2019-04-12-hexo-blog/","content":"\n\n\n选择 blog 主题 Hexo-Casper，这个主题的卡片样式我很喜欢，而起可以动态适应，page页可以添加摘要显示图片，可以让blog 避免了呆板，显得灵活有个性，page页内可以添加图片指定，可以为文章配图，能突出文章内容。\n\nrecent post，category，tag 页以卡片样式置于页面底端，不影响文章的阅读，布局很合理也很美观，PC端和移动端适应都比较好。页面的 footer 设计的十分简洁，没有过多无意义的内容，看起来很舒服。\n\n之前尝试过的几个主题对评论功能适应的不是很好，这次使用[Valine](https://valine.js.org/)，开启了评论功能 ，适应的还不错，个人比较满意。\n\nsocial 链接提供了很多选项，像 Twitter，Facebook 支持但在国内也无法访问，微博太偏向娱乐化，所以我只贴了 github 链接。事实上social 功能对于博客其实作用不大，只需在about上加一个自己的联系方式就行，我认为。\n\n当然这个主题好像也存在一些问题，比如怎么开启 rss，还有其他一些可能存在的小问题，不过问题不大，对于blog的整体体验没什么影响。\n\n之前我试过一些主题，总是会因为一些问题感觉使用起来不方便，所以更换过好几次theme，这次Hexo-Casper，个人感觉还是比较满意的。顺便把之前的几篇文章迁移过来，看了一下也很适应，只是没有引入摘要图片，这篇文章是新主题的第一篇文章，把“黑洞”照片作为了摘要图片。\n\n关于blog主题Hexo-Casper，大概就这些吧。","tags":["hexo"],"categories":["小把戏录"]},{"title":"计算机体系结构到操作系统","url":"/2019/04/02/2019-04-03-architecture-os/","content":"\n计算机学科综合了数学，逻辑学，物理学多门基础学科，并在此基础上衍生了各种各样的算法，如果我们只以简单的一门学科的角度去看待它，有时候会陷入困惑，从一个系统的角度去看待，才符合计算机的发展历史。   \n\n以系统工程的角度看，就会涉及到两个问题：体系结构和优化。可以说计算机的演化的方向就是：**设计更好的计算机层次体系得到一个具有更好性能的计算机**。\n\n谈到体系结构，最重要的是完成三个过度：\n\n> 电路语言向功能简单的语言的过度，体现为指令集与汇编语言 \n> 简单语言向抽象程度更高的语言过度，体现为高级编程语言\n> 高级语言向用户友好的界面过度，体现为图形化界面\n\n处理器、分层次的存储器、汇编器实现了第一个过度，编译器和操作系统的部分内核实现了第二个过度，不同的人机交互设备和操作系统实现了第三个过度。\n\n半个世纪以来，人们针对不同层次的优化，形成了各种各样的学问，并由此诞生了计算机这门学科，并形成了以智能化为核心的人类生存方式的革命。\n\n对于优化来讲，可以有不同层次的优化，每一层优化都要考虑到不妨碍底层的优化，同时不妨碍上层的使用，即把每一次都抽象封装起来。\n\n优化的基本思想基于两点：时序上的并发处理和空间上的层次存储。在现行的计算机体系结构下，主要的优化方式是流水处理，指令级并行，数据级并行，线程级并行，多级cache，虚存以及配套的编译器设计。由此也带来了保护和任务协调的问题。\n\n无论体系结构的设计或者各式各样的优化，我们可以看到操作系统无疑占有重要地位，它统一管理分配硬件资源，为高级语言提供操作硬件的接口，为用户提供了良好的服务环境。可以说操作系统是最为复杂的软件，它使计算机从实验室走向普罗大众。\n\n对于操作系统需要了解更多相关的概念与设计思路，操作系统是一个复杂软件，不同的需求不同的底层硬件将导致不同的实现方法，它面向用户，统一管理硬件资源，抽象层次相对较高，在对概念的理解中不必纠结具体实现，重点在于明白想法和思路。\n\n进程在现代分时操作系统中是一个核心概念，进程从产生到结束有阻塞，就绪，运行三种状态。进程的执行时间以ms为单位，而指令的运行时间以ns为单位，这就能够通过进程调度和中断来实现用户眼中的程序并发执行，而实际上处理器仍然是串行执行进程。\n\n根据距离处理器的远近可将进程的调度划分为短程调度，中程调度，长程调度。处理器可以根据进程到达的时刻，进程的执行时间，进程的优先级和进程的并发数量来进行进程调度。进程具有寄存器，代码段，数据段，堆栈和文件五类资源，每次新建进程开销都比较大。可以通过比较进程的吞吐量、周转时间和资源利用率来比较不同的进程调度算法的优劣。\n\n随着多核心处理器的推广，为了更好的利用多核心的并发性，线程被大量使用，最新的酷睿处理器支持8核16进程。另一方面，一个进程可以有多个线程，线程只需要寄存器，栈区两类资源，开销较少，有比较良好的可共享性，可以降低运行时间。线程有内核线程和用户线程两类，根据用户线程和内核线程的数量线程模型可分为多对一模型，一对一模型和多对多三种模型，其区别在于并发性和编程的简便性。\n\n有时候可能需要多个进程来协同完成不同的任务，进程之间需要相互通信，常见的通信方式有共享内存和消息传递两种方式。根据进程之间的不同逻辑关系可将其分为同步和互斥两类关系，通过信号量加以控制。\n\n当调度器调度的进程互斥，占有并等待，非抢占和循环等待时，就会造成死锁。我们通常使用静态预防，动态避免，动态消除或由编程人员来处理的方式来解决这些死锁的问题。常见的方法有自旋锁，互斥锁和银行家算法。\n\n由于处理器只能直接访问寄存器和内存，所以必须要将文件加载到内存才能执行。为了实现对不同进程的保护和管理，处理器内置基址寄存器和界限寄存器，对于用户来说看到的是逻辑地址，从0到结束，对于系统内部来说，看到的是物理地址，也就是基址寄存器到界限寄存器的地址。  \n\n高级语言机器可识别的二进制文件需要预处理，编译，汇编，链接四个步骤，对应的逻辑地址绑定方式也就分为编译时绑定，加载时绑定(从内存调用其他程序)，执行时绑定(从硬盘调用程序)。通过这些步骤完成了程序到进程的切换。\n\n在现代计算机体系中，用户视角的逻辑地址与物理地址的内存相互分隔，这是由于分页技术的使用，两者之间的转换通过硬件协调，受操作系统控制。用户不能访问逻辑地址以外的内存，也就是只能访问自己的页表所在内存。另外一种技术是段式内存分配，尽管段式内存分配可以实现代码段共享，但却会造成外碎片。页表的访问同样会造成二次访问，可用ROM来加速。\n\n还有一种重要的优化技术——虚存，基本思想和cache类似，均利用了分层次存储的思想，只不过cache一般由硬件实现而虚存由软件实现。cache实现了接近寄存器的存储速度和更大的存储容量，虚存实现内存的存储速度和比内存更高的存储容量。\n\n配合页表的使用，可以将一个大的存储空间映射到一个小的存储空间。当ROM里没有对应的页表时，就会发生缺页中断，根据预测的下一次使用时间，内存中存在时间，上一次使用时间可以有不同的算法。\n\n尽管硬盘属于外存，但是却可以不掉电存储大量文件，包括操作系统。所以尽管是输入输出设备，却也非常重要。\n\n与输入输出设备类似，文件系统分为设备驱动(中断处理)，基本文件系统，文件组织模块和逻辑文件系统四个层次。包含引导块(仅含有操作系统的分区拥有)，卷控制块(分区的详细信息)，目录(文件的基本信息)。\n\n","tags":["体系结构","OS"],"categories":["计算机"]},{"title":"RISC指令集的五个周期","url":"/2019/03/16/2019-03-16-rsic-instruction/","content":"\nRISC(reduced instruction set computer,精简指令集计算机)简称为精简指令集。RISC把执行指令的精力主要放在了经常使用的指令上面。本文主要介绍了在RISC指令集中一条指令的五个主要执行CC（Clock Cycle，时钟周期）的主要涵义以及内容。\n\n这五个时钟周期分别为：IF(Instruction fetch，取指令)，ID(Instruction decode/register fetch cycle，指令解码)，EX（Execution/effective address cycle，执行），MEM(Memory access，内存访问)， WB(Write-back cycle，写回)。\n\n**IF**：根据PC（program counter，程序计数器）中所存储的内存地址，在内存中找到该地址所指向的指令，并将该指令存储在寄存器中。同时，PC指向下一条指令，完成这个操作要求PC加4（以32位指令集为例，如果是64位则要加8）。\n\n**ID** :  操作从IF阶段获取来的指令。将指令解码，最终找到指令所需要的寄存器中存储的数据。如果该指令只一条跳转指令，那么在这一阶段需要根据跳转指令的意义对获取的值进行比较，如果比较结果为true则执行跳转，如果比较结果为false则不执行跳转，继续下一条指令的执行；如果指令需要对指令中某些位进行填充，也在ID阶段完成，比如对高四位进行填充以满足指令结果是32位；计算可能跳转的指令的地址。   \n\n**EX** : ALU（Arithmetic Logic Unit，算术逻辑单元）对ID阶段的结果进行计算。在ID阶段已经获得了指令计算所需要的寄存器的值，那么在EX阶段需要根据指令的意义对这些寄存器的值进行计算。计算根据指令的不同变得不同。主要有三种类型的ALU计算：1. ALU根据ID中补充的地址，对有效的地址单元进行计算，最终得到所需要的内存的地址；2. 根据指令的意义，对从寄存器中获取的值，进行操作，比如对两个寄存器的值进行相加；3. 根据寄存器的值以及补充的值，计算出立即数的结果。    \n\n**MEM**：如果当前指令是Load指令，那么，根据EX计算出的内存地址，从内存中获取对应的值；如果当前指令是store，那么，根据EX计算出的内存地址和寄存器的值，将寄存器的值存入该内存地址中。其他的指令一般不会设计内存的访问。   \n\n**WB**：将计算出来的最终的寄存器的值写入到register file（寄存器文件）中。这部操作包括从内存中获取的值以及通过算术运算得到的结果。 \n\n以上五个时钟周期便是一条RISC指令执行的主要步骤。","tags":["RISC"],"categories":["计算机"]},{"title":"指令周期的基本概念","url":"/2019/01/02/2019-01-02-instructions-cycle/","content":"\n\n\n最近一直在复习计算机组成原理，好多知识点都不是很清楚，PPT上写的也比较模糊，特别是讲解控制器和指令的部分，好多图演示的不太清楚。还好我发现了一篇文章，它把指令周期的基本概念和指令周期的数据流都进行了详细的讲解。我觉得写的很好，又怕自己以后不记得了，想看时找不到，所以就把它转载了。\n\n原文地址：http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/j2.htm?tdsourcetag=s_pctim_aiomsg\n\n\n\n## 第二节　指令周期\n\n### 一、指令周期的基本概念\n\nCPU每取出并执行一条指令所需的全部时间叫指令周期，也即CPU完成一条指令的时间叫指令周期，如下图所示。图中的取指阶段完成取指令和分析指令的操作，又叫取指周期；执行阶段完成执行指令的操作，又叫执行周期。在大多数情况下， CPU就是按取指－执行－再取指－再执行……的顺序自动工作的。\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s4.gif)\n\n由于各种指令操作功能不同，因此各种指令的指令周期是不相同的。例如无条件转移指令JMP X， 在执行阶段不需访问主存，而且操作简单，完全可以在取指阶段的后期将转移地址X送至PC， 以达到转移的目的。这样， JMP X指令的指令周期就是取指周期。又如一地址格式的加法指令ADD X，在执行阶段首先要从X所指示的存储单元中取出操作数，然后和ACC的内容相加，结果存于ACC，故这种指令的指令周期在取指和执行阶段各访问一次存储器，其指令周期就包括两个存取周期。再如乘法指令，其执行阶段所要完成的操作比加法指令多得多，故它的执行周期超过了加法指令，如下图所示。\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s5.gif)\n\n此外，当遇到间接寻址的指令时，由于指令字中只给出操作数有效地址的地址，因此，为了取出操作数，需先访问一次存储器，取出有效地址，然后再访问存储器，取出操作数。这样，间接寻址的指令周期就包括取指周期、间址周期和执行周期三个阶段，其中间址周期用于取操作数的有效地址，因此间址周期介于取指周期和执行周期之间，如下图所示。\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s6.gif)\n\n由第五章可知，当CPU采用中断方式实现主机与I/O交换信息时，CPU在每条指令执行阶段结束前， 都要发中断查询信号，以检测是否有某个I/O提出中断请求。如果有请求，CPU则要进入中断响应阶段，又称中断周期。在这阶段， CPU必须将程序断点保存到存储器中。这样，一个完整的指令周期应包括取指、间址、执行和中断4个子周期，如下图所示。由于间址周期和中断周期不一定包含在每个指令周期内，故图中用菱形框判断。\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s7.gif)\n\n总之，上述4个周期都有CPU访存操作， 只是访存的目的不同。取指周期是为了取指令，间址周期是为了取有效地址，执行周期是为了取操作数(当指令为访存指令时)，中断周期是为了保存程序断点。这4个周期又可叫CPU的工作周期，为了区别它们，在CPU内可设置4个标志触发器，如下图所示。\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s8.gif)\n\n图中的FE、IND，EX和INT分别对应取指、间址、执行和中断4个周期，并以“1”状态表示有效；它们分别由1→FE、1→IND、1→EX和1→INT4个信号控制。\n设置CPU工作周期标志触发器对设计控制单元十分有利。 例如，在取指阶段，只要设置取指周期标志触发器FE为1， 由它控制取指阶段的各个操作，便获得对任何一条指令的取指命令序列。又如在间接寻址时，间址次数可由间址周期标志触发器IND确定，当它为“0”状态时，表示间址结束。再如对于一些执行周期不访存的指令(如转移指令，寄存器类型指令)，同样可以用它们的操作码与取指周期标志触发器的状态相“与”，作为相应微操作的控制条件。\n\n\n\n### 二、指令周期的数据流\n\n为了便于分析指令周期中的数据流，假设CPU中有存储器地址寄存器MAR、存储器数据寄存器MDR、程序计数器PC和指令寄存器IR。\n\n#### 1. 取指周期的数据流\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s9.gif)\n\n上图是取指周期的数据流。PC中存放现行指令的地址，该地址送到MAR并送至地址总线， 然后由控制部件CU向存储器发出读命令，使对应MAR所指单元的内容(指令)经数据总线送至MDR，再送至IR，与此同时CU控制PC内容加1，形成下一条指令的地址。\n\n#### 2. 间址周期的数据流\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s10.gif)\n\n间址周期的数据流如上图所示。一旦取指周期结束，CU便检查IR中的内容，以确定其是否有间址操作， 如果需间址操作，则MDR中指示形式地址的右N位将被送至MAR，又送至地址总线，此后CU向存储器发读命令，并获取有效地址并存至MDR。\n\n#### 3. 执行周期的数据流\n\n由于不同的指令在执行周期的操作不同，因此执行周期的数据流是多种多样的， 可能涉及到CPU内部寄存器间的数据传送、或对存储器(或I/O)进行读写操作、或对ALU的操作，因此，无法用统一的数据流图表示。\n\n#### 4. 中断周期的数据流\n\nCPU进入中断周期要完成一系列操作， 其中PC当前的内容必须保存起来，以待执行完中断服务程序后可准确返回到该程序的间断处，这一操作的数据流如下图所示。\n\n![img](http://media4.open.com.cn/l603/fushi/0903/jisuanjzcyl/web/lesson/char8/image/s11.gif)\n\n图中由CU把用于保存程序断点的存储器特殊地址（如堆栈指针的内容）送往MAR，并送到地址总线上， 同时将PC的内容（程序断点）送到MDR，并命令存储器写，最终使程序断点经数据总线存入存储器。此外，还需将中断服务程序的入口地址送至PC，为下一个指令周期的取指周期作好准备。\n\n ","tags":["指令周期"],"categories":["计算机"]},{"title":"Optimized C++：Proven Techniques for Heightened Performance","url":"/2018/09/07/2018-09-07-optimized-cpp/","content":"\n\n## C++性能优化指南   \n这是一篇关于C++性能优化指南的学习笔记，主要是通过阅读学习Kurt Guntheroth著的Optimized C++：Proven Techniques for Heightened Performance。 这是一本知识量和信息量很大的一本书书，书里详细介绍了影响C++程序性能的原因，也给出了很多提高性能的优化策略。   \n书中不仅讲解了软件和系统方面的相关内容，还涉及了计算机的硬件组成的基础知识，使读者可以全面的了解计算机和程序设计。书中介绍的方法是具有通用性的，可以延伸至其他的编程语言，个人认为这是一本可以提升程序设计能力、感受到优化之美的一本值得一读的好书。\n\n![book](http://wx4.sinaimg.cn/bmiddle/00709Ldkly1fyqxjdyyesj30jg0dywgx.jpg)\n-------------------\n**以下是我关于本书的学习笔记**   \n\n## Catagory\n1. [C++代码优化策略总结](#C++代码优化策略总结)\n2. [影响优化的计算机行为](#影响优化的计算机行为)\n3. [性能测量](#性能测量)\n4. [优化字符串的使用](#优化字符串的使用)\n5. [优化动态分配内存的变量](#优化动态分配内存的变量)\n6. [优化热点语句](#优化热点语句)\n7. [使用更好的库](#使用更好的库)\n8. [优化算法](#优化算法)\n9. [优化查找和排序](#优化查找和排序)\n10. [优化并发](#优化并发)\n\n---\n\n## C++代码优化策略总结\n1、用好的编译器并用好编译器（支持C++11的编译器，IntelC++（速度最快）、GNU的C++编译器GCC/G++（非常符合标准），Visual C++（性能折中），clang（最年轻Mac OS x））。    \n\n2、使用更好的算法。（绝大多数高效的程序都有高效的算法）。  \n\n3、使用更好的数据结构（不同的数据结构在使用内存管理器的方式也有所不同）。 \n\n4、使用更好的库（熟悉和掌握标准C++模板库对于进行性能优化的开发员是必须的技能，Boost Project 和 Google Code 公开了很多有用的库）。  \n\n5、减少内存分配和复制（减少对内存管理器的调用是一种非常有效的优化手段）。  \n\n6、优化内存管理（内存管理器的调度，丰富的API）。 \n\n7、提高并发性（多个处理核心执行指令）。\n\n\n## 影响优化的计算机行为 \n1、计算机的主内存是比较慢的（通往主内存的接口是限制执行速度的瓶颈（冯*诺伊曼瓶颈），（摩尔定理）每年处理器的核心的数量都会增加，但是计算机的性能未必会提高，因为这些核心只是等待访问内存的机会（内存墙memory wall））。  \n\n2、计算机内存的访问方式（并非以字节为单位），某些内存访问会比其他的更慢（分为一级高速缓存（cache memory）、二级高速缓存、三级高速缓存、主内存、磁盘上的虚拟内存页）。 \n\n3、内存的容量是有限的，每个程序都会与其他程序竞争计算机资源，计算比做决定快。  \n\n4、在处理器中，访问内存的性能开销远比其他操作的性能开销大，非对齐访问所需要的时间是所有字节都在同一字节中的两倍。  \n\n5、访问频繁使用的内存地址的速度比访问非频繁使用的地址快，访问相邻地址的内存的速度比访问相互远隔的地址的内存快。 \n\n6、访问线程间共享的数据比访问非共享的数据资源慢很多。当并发线程共享数据时，同步代码降低了并发量。  \n\n7、有些语句隐藏了大量的计算，从语句的外表上看不出语句的性能开销会有多大。\n\n\n## 性能测量\n1、90/10规则：一个程序会花费90%的运行时去执行10%的代码。   \n2、只有正确且精确的测量才是准确的测量。  \n3、分辨率不是准确性  \n4、在Windows上，clock()函数提供了可靠的毫秒级的时钟计时功能。在Windows8和之后的版本中，GetSystemTimePreciseAsfileTime()提供了亚微秒的计时功能。   \n5、计算一条C++语句对内存的读写次数，可以估算出一句C++ 语句的性能开销。\n\n\n## 优化字符串的使用\n1、由于字符串是动态分配内存的，因此他们的性能开销非常大。它们在表达式中的行为与值类似，它们的实现方式中需要大量的复制。   \n\n2、将字符串作为对象而非值可以降低内存分配和复制的频率。  \n\n3、为字符串预留内存空间可以减少内存分配的开销。 \n\n4、将指向字符串的常量引用传递给函数与传递值的结果几乎一样，但是更加高效。  \n\n5、将函数的结果通过输出参数作为引用返回给调用方会复用实参的存储空间，这可能比分配新的存储空间更加高效。  \n\n6、即使只是有时候会减少内存分配的开销，仍然是一种优化。\n\n## 优化动态分配内存的变量\n1、在C++程序中，乱用动态分配内存的变量是最大的“性能杀手”。\n\n2、C++变量（每个普通数据类型的变量；每个数组，结构体或类实例）在内存中的布局都是固定的，它们的大小在编译时就已经确定了。\n\n3、每个变量都有它的存储期（生命周期），只有在这段时间内变量所占用的存储空间或者内存字节中的值才是有意义的。为变量分配内存的开销取决于存储期（静态存储期、线性局部存储期、自动存储期、动态存储期）。\n\n4、C++变量的所有者决定了变量什么时候会被创建，什么时候会被析构（变量所有权是一个单独的概念，与存储期不同）。动态变量的所有权必须有程序员执行并编写在程序逻辑中，它不受编译器控制，也不由C++定义。具有强定义所有权的程序会比所有权分散的程序更高效。\n\n5、在C++中，动态变量是由 new 表达式创建，由 delete 表达式释放的。它们会调用C++标准库的内存管理函数。\n\n6、智能指针会通过耦合动态变量的生命周期与拥有该变量的智能指针的生命周期，来实现动态变量所有权的自动化。C++允许多个指针和引用指向同一个动态变量，共享了所有权的动态变量开销更大。\n\n7、静态的创建类成员并且在有必要时采用“两段初始化”，这样可以节省为这些成员变量分配内存的开销。\n\n8、让主指针来拥有动态变量，使用无主指针替代共享所有权。\n\n9、从性能优化的角度上看，使用指针或是引用进行赋值和参数传递，或是返回指针或引用更加高效，因为指针和引用时存储在寄存器中的。\n\n10、当一个数据结构中的元素被存储在连续的存储空间中时，我们称这个数据结构为扁平的，相比于通用指针链接在一起的数据结构，扁平数据结构具有显著的性能优势。\n\n\n\n\n## 优化热点语句\n1、除非有一些因素放大了语句的性能开销，否则不值得进行语句级别的性能优化，因为所能带来的性能提升不大。\n\n2、循环中的语句的性能开销被放大的倍数是循环的次数。函数中的语句的性能开销被放大的倍数是函数被调用的次数。被频繁地调用的编程惯用法的性能开销被放大的倍数是其被调用的次数。\n\n3、从循环中移除不变性代码（当代码不依赖于循环的归纳变量时，它就具有循环不变性），不过现代编译器非常善于找出循环中被重复计算的具有循环不变性的代码。\n\n4、从循环中移除无谓的函数调用，一次函数调用可能会执行大量指令，这是影响程序性能的一个重要因素，如果一个函数具有循环不变性，那么将它移除到循环外有助于改善性能。有一种函数永远都可以被移动到循环外部，那就是返回值只依赖于函数参数而且没有副作用的纯函数。\n\n5、从循环中移除隐含的函数调用；如果将函数签名从通过值传递实参修改为传递指向类的引用和指针，有时候可以在进行隐式函数调用时移除形参构建。\n\n6、调用函数的开销是非常小的，只是执行函数体的开销可能非常大，如果一个函数被重复调用多次则累积的开销会变得很大。函数调用的开销主要包括函数调用的基本开销、虚函数的开销、继承中的成员函数调用、函数指针的开销等。函数的调用开销虽然很大，但正因为函数调用才实现了程序的一些复杂的功能。\n\n6、调用操作系统的函数的开销是高成本的。\n\n7、内联函数是一种有效的移除函数调用开销的方法。\n\n\n\n## 使用更好的库\n1、C++为常用功能提供了一个简洁的标准库。   \n\n* 确定哪些依赖于实现的行为，如每种数据类型的最大值和最小值。   \n* 易于使用但是编写和验证都很繁琐的可移植的超越函数（超越函数指的是变量之间的关系不能用有限次加、减、乘、除、乘方、开方运算表示的函数），如正弦函数和余弦函数、对数函数和幂函数、随机数函数等等。   \n* 除了内存分配外，不依赖于操作系统的可移植的通用数据结构、如字符串、链表和表。   \n* 可移植的通用数据查找算法、数据排序算法和数据转换算法。  \n* 以一种独立于操作系统的方式与操作系统的基础服务相联系的执行内存分配、操作线程、管理和维护时间以及流I/O等任务的函数。  \n\n2、使用C++标准库的注意事项   \n\n* 标准库的实现中有bug，(标准库和编译器是单独维护的，编译器中也可能存在bug，标准需求的改变、责任的分散、计划问题以及标准库的复杂度都会不可避免地影响它们的质量)。   \n* 标准库的实现可能不符合C++标准，（库的发布计划和编译器是不同的，而编译器的发布计划与与C++标准不同，一个标准库的实现可能会领先或是落后于编译器）。   \n* 对于标准库开发人员来说，性能并非是最终要的事情，（因为库会被长期使用，所以库的简单性和可维护性更加重要）。  \n* 库的实现可能会让一些优化手段失效，C++标准库中的有些部分并非是有用的。  \n* 标准库不如最好的原生函数，（标准库没有为某些操作系统提供异步文件I/O等特性，性能优化人员只能通过调用原生函数，牺牲可移植性来换取运行速度）。\n\n\n3、C++标准库之所以提供这些函数和类，是因为要么无法以其他方式提供这些函数和类，要么这些函数和类被广泛地用于多种操作系统上。在对库进行性能优化时，测试用例非常关键；接口的稳定性是可交付的库的核心。   \n\n4、扁平继承层次关系（多数抽象都不会有超高三层类继承层次，一旦超高三次可能表明类的层次结构不够清晰，其引入的复杂性会导致性能的下降）。\n扁平调用链（绝大多数抽象的实现都不会超高三层嵌套函数的调用，在已经充分解耦的库中是不会包含冗长的嵌套抽象调用链的）。    \n\n\n## 优化算法  \n1、高效的算法是计算机科学一直研究的主题，计算机科学家十分重视算法和数据结构的研究，因为它是展示优化代码的典型事例。当一个程序需要数秒内执行完毕，实际上却要花费数小时时，唯一可以用成功的优化方法可能就是选择一种高效的算法了。算法是一个非常重要且不能简而概之的主题，可以参考《算法导论》，进行更深入的学习。   \n![book](http://wx4.sinaimg.cn/bmiddle/00709Ldkly1fyqxjeewsaj30eb0jm75z.jpg)\n\n2、优化模式\n开发人员研究算法和数据结构的原因之一是其中蕴含着用于改善性能的“思维库”，这些改善性能的通用技巧是非常的使用的，其中的一些模式也是数据结构、C++语言特性和硬件创新的核心。  \n\n* 预计算；可以在程序早期，通过在热点代码前执行执行计算来将计算从热点部分中移除。\n* 延迟计算；通过在正真需要执行计算时才执行计算，可将计算从某些代码路径上移除。\n* 批量处理；每次对多个元素一起进行计算，而不是一次只对一个元素进行计算。\n* 缓存；通过保存和复用高代价计算的结果来减少计算量，而不是重复进行计算。\n* 特化；通过移除未使用的共性来减少计算量。\n* 提高处理量；通过一次处理一大组数据来减少循环处理的开销。\n* 提示；通过在代码中加入可能会改善性能的提示来减少计算量。\n* 优化期待路径；以期待频率从高到低的顺序对输入数据或是运行时发生的事件进行测试。\n* 散列法；计算可变成字符串等大型数据结构的压缩数值映射（散列值）。在进行比较时，用散列代替数据结构可以提高性能。\n* 双重检查；通过先进行一项开销不大的检查，然后只在必要时才进行另外一项开销昂贵的检查来减少计算量。 \n\n\n## 优化查找和排序\n1、改善查找性能的工具箱，测量当前的实现方式的性能来得到比较基准，识别出待优化的抽象活动，将待优化的活动分解为组件算法和数据结构，修改或是替换那些可能并非最优的算法和数据结构，然后进行性能测试以确定修改是否有效果。\n\n2、标准库查找算法接受两个迭代器参数：一个指向待查找序列的开始位置，另一个则指向待查找序列的末尾位置（最后一个元素的下一个位置）。所有的算法还都接受一个要查找的键作为参数以及一个可选的比较函数参数。\n\n3、使用C++标准库优化排序，在能够使用分而治之算法高效地进行查找之前，我们必须先对序列容器排序，C++标准库提供了两种能够高效地对序列容器进行排序的标准算法——`std::sort()` 和 `std::stable_sort()`。\n\n\n\n## 优化并发\n1、并发是多线程控制的同步执行，并发的目标不是减少指令执行的次数或是每秒访问数据的次数，而是通过提高计算资源的使用率来减少程序运行的时间的。\n\n2、有很多机制能够为程序提供并发，其中有些基于操作系统或是硬件。C++标准库直接支持线程共享内存的并发模型。\n\n3、计算机硬件、操作系统、函数库以及C++自身的特性都能够为程序提供并发支持。  \n\n* 时间分隔；这是操作系统的一个调度函数，为每个程序都分配时间块。操作系统是依赖于处理器和硬件的。它会使用计时器和周期性的中断来调整处理器的调度。\n* 虚拟化；虚拟化技术是让操作系统将处理器的时间块分配给客户虚拟机，计算资源能够根据每台客户虚拟机上正在运行的程序的需求进行分配。\n* 容器化；容器中包含了程序在检查点的文件系统镜像和内存镜像，其主机是一个操作系统，能够直接提供I/O和系统资源。\n* 对称式多处理；是一种包含若干执行相同机器代码并访问相同物理内存的执行单元的计算机，现代多核处理器都是对称式多处理器。使用正真的硬件并发执行多线程控制。\n* 同步多线程；有些处理器的硬件核心有两个或多个寄存器集，可以相应地执行两条或多条指令流。最高效第使用软件线程的方法是让软件线程数量与硬件线程数量匹配。\n* 多进程；进程是并发的执行流，这些执行流有它们自己的受保护的虚拟内存空间，进程之间通过管道、队列、网路I/O或是其他不共享的机制进行通信，进程的主要优点是操作系统会隔离各个进程，使其不会互相干扰影响。\n* 分布式处理；是指程序活动分布在一组处理器上，这些处理器可以不同。分布式处理系统通常会被分解为子系统，形成模块化的，易于理解的和能够重新配置的体系结构。\n* 线程；线程是进程中的并发执行流，它们之间共享内存；与进程相比，线程的优点在于消耗的资源更少、创建和切换也更快。由于进程中的所有线程都共享相同的内存空间，所以一个线程写入无效的内存地址可能会覆盖掉其他线程的数据结构，导致线程奔溃或是出现不可预测的情况。\n* 任务；任务是一个独立线程的上下文中能够被异步调用的执行单元，任务运行的基础是线性池。基于任务的并发构建于线程之上，因此任务也具有线程的优点和缺点。\n\n4、如果没有竞争，那么一个多线程C++程序具有顺序一致性，理想的竞争一块短临界区的核心数量是两个。在临界区中执行I/O操作无法优化性能，可运行线程的数量应当少于或等于处理器核心数量。\n","tags":["C++","notes"],"categories":["知识记录"]}]